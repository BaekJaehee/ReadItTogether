def backendImage
def frontendImage
def modelImage

pipeline {
    agent any
    environment {
        // 환경 변수 설정
        
        GIT_REGISTRY_CREDENTIALS = credentials('gitlab_tokken')
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker')
        GCP_SERVICE_ACCOUNT_JSON = credentials('GCP_SERVICE_ACCOUNT_JSON')
        FRONT_IMAGE_NAME = "${env.FRONT_IMAGE_NAME}"
        REACT_APP_API_BASE_URL = "${env.REACT_APP_API_BASE_URL}"
        DATABASE_URL="${env.DATABASE_URL}"
        DATABASE_USERNAME="${env.DATABASE_USERNAME}"
        DATABASE_PASSWORD="${env.DATABASE_PASSWORD}"
        DOCKER_COMPOSE_FILE = "docker-compose.yml"       
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    git credentialsId: 'gitlab_tokken', url: 'https://lab.ssafy.com/s10-bigdata-recom-sub2/S10P22D206'
                }
            }
        }


        stage('Build and Push the Back-end Docker Image') {
            steps {
                script {
                    sh 'echo "Starting Build Back Docker Image"'
                    dir('back') {
                        withDockerRegistry(credentialsId: 'docker', url: 'https://registry.hub.docker.com') {

                            withCredentials([file(credentialsId: 'GCP_SERVICE_ACCOUNT_JSON', variable: 'GCP_SERVICE_ACCOUNT_JSON')]) {
                                sh 'cp $GCP_SERVICE_ACCOUNT_JSON ./google_service_key.json'
                               
                                backendImage = docker.build("${BACK_IMAGE_NAME}:${env.BUILD_NUMBER}", 
                                "--build-arg DATABASE_URL='${env.DATABASE_URL}' " +
                                "--build-arg DATABASE_USERNAME='${env.DATABASE_USERNAME}' " +
                                "--build-arg DATABASE_PASSWORD='${env.DATABASE_PASSWORD}' .")


                                sh 'rm -f ./google_service_key.json' // 빌드 후 파일 삭제
                                

                                // Docker 빌드 결과 출력
                                if (backendImage != 0) {
                                    echo "Docker build succeeded: ${BACK_IMAGE_NAME}:${env.BUILD_NUMBER}"
                                    docker.withRegistry('https://registry.hub.docker.com', 'docker') {
                                        backendImage.push()
                                }
                                // sh "docker run -p 8000:8000 ${BACK_IMAGE_NAME}:${env.BUILD_NUMBER}"
                                } else {
                                    error "Docker build failed"
                                }
                                
                            }
                            
                             
                        }
                    }
                }
            }
            
        }    

        stage('Build and Push the Front-end Docker Image') {
            steps {
                script {
                    sh 'echo "Starting Build Front Docker Image"'
                    dir('front') {
                        withDockerRegistry(credentialsId: 'docker', url: 'https://registry.hub.docker.com') {
                             frontendImage = docker.build("${FRONT_IMAGE_NAME}:${env.BUILD_NUMBER}",
                            //   "--build-arg REACT_APP_API_BASE_URL=${env.REACT_APP_API_BASE_URL} .")  //추후 예정
                             )

                            if (frontendImage != 0) {
                                echo "Docker build succeeded: ${FRONT_IMAGE_NAME}:${env.BUILD_NUMBER}"
                                docker.withRegistry('https://registry.hub.docker.com', 'docker') {
                                    frontendImage.push()
                            }
                            } else {
                                error "Docker build failed"
                            }
                        }
                    }
                }
            }
            
        }
//         stage('Build Docker Images Without Cache') {
//             steps {
//                 script {
//                     sh "docker-compose -f ${DOCKER_COMPOSE_FILE} build --no-cache"
//         }
//     }
// }
        stage('Deploy') {
        steps {
        script {
            sh "docker-compose -f ${DOCKER_COMPOSE_FILE} up -d"
            // 컨테이너 ID를 올바르게 가져오기 위한 수정
            def frontContainerId = sh(script: "docker ps -qf \"name=^d206_pipeline_frontend_1\$\"", returnStdout: true).trim()
            if (frontContainerId) {
                // 경로를 올바르게 설정하여 docker cp 명령어 실행
                sh "docker cp ${frontContainerId}:/app/build /usr/share/nginx/html"
                sh "sudo systemctl restart nginx"
            } else {
                error "Front-end container not found. Deployment failed."
            }
        }
    }
}


    }
}

